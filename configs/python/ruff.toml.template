# Ruff configuration for {{PROJECT_NAME}}
target-version = "py312"
line-length = 88

# Exclude directories
exclude = [
    "legacy",
    "archive",
    ".venv",
    "__pycache__",
]

[lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PLE", # pylint errors
    "PLR", # pylint refactor
    "PLW", # pylint warnings
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "S101",   # use of assert (OK for tests)
    "PLR0913", # too many arguments (sometimes needed)
    "PLR2004", # magic value used in comparison (OK for constants)
    "COM812",  # trailing comma missing (conflicts with formatter)
    "PLR0911", # too many return statements (sometimes needed)
    "PLR0912", # too many branches (OK for complex logic)
    "PLR0915", # too many statements (OK for complex functions)
    "S105",   # hardcoded password strings (OK in test fixtures)
    "S106",   # hardcoded password function args (OK in test fixtures)
    "S108",   # hardcoded temp file usage (OK in demos/examples)
    "S311",   # non-cryptographic random (OK for non-security use)
    "S603",   # subprocess call (OK for system utilities)
    "S607",   # partial executable path (OK for common commands)
    "S608",   # hardcoded SQL expressions (OK for queries)
    "ARG001", # unused function arguments (OK in interfaces)
    "ARG002", # unused method arguments (OK in interfaces)
    "ARG005", # unused lambda arguments (OK for callbacks)
    "B008",   # function call in default argument (OK for typer CLI)
    "B017",   # assert raises exception (OK for pytest patterns)
    "PT011",  # pytest raises too broad (OK for generic error testing)
    "PT012",  # pytest raises with multiple statements (OK for complex tests)
    "PT017",  # pytest assert in except (OK for import error handling)
    "RUF001", # ambiguous unicode character
    "RUF012", # mutable class default (OK for Pydantic models)
    "PLW2901",# redefined loop name (OK when intentional)
    "A001",   # builtin variable shadowing (OK for names like 'all')
    "A002",   # builtin argument shadowing (OK for params like 'type')
    "SIM102", # collapsible if (OK when readability is better)
    "SIM103", # needless bool (OK when explicit conversion is clearer)
    "SIM117", # multiple with statements (OK for resource management)
    "E721",   # type comparison (OK for explicit type checking)
    "F811",   # redefined while unused (OK for method overrides)
    "N802",   # invalid function name (OK for parsers)
    "N806",   # non-lowercase variable in function (OK for dynamic models)
]

[lint.isort]
known-first-party = ["{{PACKAGE_DIRS}}"]
force-single-line = false
lines-between-types = 1
split-on-trailing-comma = true
combine-as-imports = true

[format]
quote-style = "single"  # Python best practices
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true